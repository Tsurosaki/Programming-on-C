#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

// Функция для создания матрицы
int** create_matrix(int rows, int cols) {
    int matrix = (int)malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
    }
    return matrix;
}

// Функция для заполнения матрицы случайными числами
void fill_matrix(int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = rand() % 100;
        }
    }
}

// Функция для освобождения памяти матрицы
void free_matrix(int** matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Функция для сложения матриц
int add_matrices(int a, int** b, int rows, int cols) {
    int** result = create_matrix(rows, cols);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = a[i][j] + b[i][j];
        }
    }
    return result;
}

// Функция для умножения матриц
int multiply_matrices(int a, int a_rows, int a_cols, int b, int b_rows, int b_cols) {
    if (a_cols != b_rows) {
        printf("Невозможно умножить матрицы: несовместимые размеры\n");
        return NULL;
    }
    
    int** result = create_matrix(a_rows, b_cols);
    for (int i = 0; i < a_rows; i++) {
        for (int j = 0; j < b_cols; j++) {
            result[i][j] = 0;
            for (int k = 0; k < a_cols; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    return result;
}

// Функция для записи матрицы в файл
void write_matrix(FILE* file, int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fprintf(file, "%d ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }
}

int main() {
    srand(time(NULL));
    clock_t start = clock();
    
    int rows, cols;
    printf("Введите количество строк и столбцов для матриц: ");
    scanf("%d %d", &rows, &cols);
    
    // Создаем и заполняем матрицы
    int** matrix1 = create_matrix(rows, cols);
    int** matrix2 = create_matrix(rows, cols);
    fill_matrix(matrix1, rows, cols);
    fill_matrix(matrix2, rows, cols);
    
    // Записываем матрицы в файл
    FILE* input = fopen("input.txt", "w");
    write_matrix(input, matrix1, rows, cols);
    fprintf(input, "\n");
    write_matrix(input, matrix2, rows, cols);
    fclose(input);
    
    // Очищаем матрицы
    free_matrix(matrix1, rows);
    free_matrix(matrix2, rows);
    
    // Читаем матрицы из файла
    input = fopen("input.txt", "r");
    matrix1 = create_matrix(rows, cols);
    matrix2 = create_matrix(rows, cols);
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fscanf(input, "%d", &matrix1[i][j]);
        }
    }
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            fscanf(input, "%d", &matrix2[i][j]);
        }
    }
    fclose(input);
    
    // Выполняем операции с матрицами
    int** sum = add_matrices(matrix1, matrix2, rows, cols);
    int** product = multiply_matrices(matrix1, rows, cols, matrix2, rows, cols);
    
    // Записываем результаты в файл
    FILE* output = fopen("output.txt", "w");
    fprintf(output, "Сумма матриц:\n");
    write_matrix(output, sum, rows, cols);
    
    if (product != NULL) {
        fprintf(output, "\nПроизведение матриц:\n");
        write_matrix(output, product, rows, cols);
    }
    fclose(output);
    
    // Освобождаем память
    free_matrix(matrix1, rows);
    free_matrix(matrix2, rows);
    free_matrix(sum, rows);
    if (product != NULL) free_matrix(product, rows);
    
    // Выводим время выполнения
    clock_t end = clock();
    double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Время выполнения программы: %f секунд\n", time_spent);
    
    return 0;
}
